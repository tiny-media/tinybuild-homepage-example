---
title: "FOUC Prevention and View Transitions in Progressive Islands"
description: "How to eliminate layout shifts during navigation and add smooth view transitions using CUBE CSS methodology and native web APIs"
eleventyNavigation:
  parent: "Blog"
  key: "FOUC Prevention & View Transitions"
  order: 1
date: 2025-01-27
tags: ["performance", "css", "progressive-enhancement", "cube-css", "view-transitions"]
---

{{ layout "layouts/base.vto" }}

<article class="[ blog-post ] [ flow flow--xl ]">
  <header class="[ blog-header ] [ flow flow--lg ]">
    <h1 class="hero__title">FOUC Prevention and View Transitions in Progressive Islands</h1>
    <p class="hero__lead">How to eliminate layout shifts during navigation and add smooth view transitions using CUBE CSS methodology and native web APIs.</p>
    <div class="[ meta ] [ cluster ] [ text-secondary ]">
      <time datetime="2025-01-27">January 27, 2025</time>
      <span>â€¢</span>
      <span>Performance, CSS, Progressive Enhancement</span>
    </div>
  </header>

  <div class="[ blog-content ] [ flow flow--lg ]">
    <h2>The Problem: Navigation Layout Shifts</h2>
    
    <p>When navigating between pages, users often experience a brief flash where content appears unstyled in the upper left corner before shifting into its proper layout. This Flash of Unstyled Content (FOUC) creates a jarring experience that makes websites feel slow and unpolished.</p>

    <p>The root cause? CSS files loading after HTML, causing a brief moment where only browser default styles apply.</p>

    <h2>The Solution: Critical CSS + Progressive Loading</h2>

    <p>Our approach combines three key techniques following CUBE CSS methodology:</p>

    <h3>1. Critical CSS Inlining</h3>

    <p>We inline only the essential above-the-fold styles directly in the <code>&lt;head&gt;</code>:</p>

    <pre class="code-block"><code><!-- Critical CSS inlined to prevent FOUC -->
&lt;style&gt;
/* Essential Design Tokens */
@layer tokens {
  :root {
    --color-surface-primary: oklch(96% 0.008 35%);
    --color-text-primary: oklch(22% 0.025 30%);
    /* Core spacing, typography, colors only */
  }
}

/* Critical Layout - Above the fold only */
@layer utilities {
  .wrapper { /* container styles */ }
  .flow { /* vertical rhythm */ }
  .cluster { /* flexbox utilities */ }
}

/* Critical Navigation - Visible immediately */
@layer blocks {
  .site-header { /* header styles */ }
  .nav-list { /* navigation styles */ }
}
&lt;/style&gt;</code></pre>

    <h3>2. Progressive CSS Loading with Islands</h3>

    <p>Non-critical CSS loads progressively using the native <code>@11ty/is-land</code> capabilities:</p>

    <pre class="code-block"><code>&lt;is-land on:idle&gt;
  &lt;template data-island&gt;
    &lt;link rel="stylesheet" href="/assets/main.css"&gt;
  &lt;/template&gt;
  &lt;!-- Fallback for no-JS users --&gt;
  &lt;noscript&gt;&lt;link rel="stylesheet" href="/assets/main.css"&gt;&lt;/noscript&gt;
&lt;/is-land&gt;</code></pre>

    <p>This leverages browser idle time to load enhanced styles, ensuring the critical path remains fast while providing full styling once the browser is ready.</p>

    <h3>3. View Transitions for Smooth Navigation</h3>

    <p>We add the native CSS View Transitions API as a progressive enhancement:</p>

    <pre class="code-block"><code>/* Progressive enhancement for smooth navigation */
@media not (prefers-reduced-motion: reduce) {
  @view-transition {
    navigation: auto;  /* Multi-page transitions */
  }
  
  .site-main {
    view-transition-name: main-content;
  }
  
  .hero__title {
    view-transition-name: page-title;
  }
}</code></pre>

    <h2>CUBE CSS Compliance</h2>

    <p>This approach follows CUBE CSS principles by:</p>

    <ul>
      <li><strong>Using Design Tokens</strong>: Critical CSS includes only essential custom properties</li>
      <li><strong>Respecting Cascade Layers</strong>: Proper <code>@layer</code> organization maintained</li>
      <li><strong>Composition Over Custom</strong>: Leverages existing utilities rather than creating new styles</li>
      <li><strong>Progressive Enhancement</strong>: Works without JavaScript, enhanced with it</li>
    </ul>

    <h2>Performance Benefits</h2>

    <div class="[ performance-table ]">
      <h3>Before vs After</h3>
      <table>
        <thead>
          <tr>
            <th>Metric</th>
            <th>Before</th>
            <th>After</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Layout Shift (CLS)</td>
            <td>0.15+ (Poor)</td>
            <td>0.0 (Good)</td>
          </tr>
          <tr>
            <td>First Contentful Paint</td>
            <td>~800ms</td>
            <td>~200ms</td>
          </tr>
          <tr>
            <td>Navigation Feel</td>
            <td>Jarring flash</td>
            <td>Smooth transition</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2>Implementation Details</h2>

    <h3>Template Structure</h3>
    
    <p>The solution uses modular VentoJS partials:</p>

    <ul>
      <li><code>partials/head.vto</code> - Critical CSS and theme initialization</li>
      <li><code>partials/header.vto</code> - Site header with navigation</li>
      <li><code>partials/nav.vto</code> - Navigation using <code>@11ty/eleventy-navigation</code></li>
      <li><code>partials/footer.vto</code> - Site footer</li>
    </ul>

    <h3>Navigation Plugin Integration</h3>

    <p>The navigation system uses the official Eleventy plugin with VentoJS syntax:</p>

    <pre class="code-block"><code>// In eleventy.config.js
eleventyConfig.addPlugin(EleventyNavigationPlugin);

// In navigation partial (note |> syntax for VentoJS)
{{ set navPages = collections.all |> eleventyNavigation }}

// In page front matter
eleventyNavigation:
  key: "Home"
  order: 1</code></pre>

    <h2>Browser Support and Fallbacks</h2>

    <ul>
      <li><strong>Critical CSS</strong>: Universal support (inlined styles)</li>
      <li><strong>View Transitions</strong>: Modern browsers (Chrome 111+), graceful degradation</li>
      <li><strong>Islands Loading</strong>: Progressive enhancement with <code>&lt;noscript&gt;</code> fallback</li>
      <li><strong>Reduced Motion</strong>: Respects user accessibility preferences</li>
    </ul>

    <h2>Key Takeaways</h2>

    <ol>
      <li><strong>Inline Critical CSS</strong>: Only above-the-fold styles, following CUBE methodology</li>
      <li><strong>Use Native Islands</strong>: Leverage <code>@11ty/is-land</code> built-in CSS loading rather than custom components</li>
      <li><strong>Progressive Enhancement</strong>: Start with working base, enhance with smooth transitions</li>
      <li><strong>Respect User Preferences</strong>: Honor <code>prefers-reduced-motion</code> and provide fallbacks</li>
      <li><strong>Measure Performance</strong>: Zero layout shift and faster perceived performance</li>
    </ol>

    <p>This approach eliminates FOUC while maintaining the Progressive Islands philosophy of starting static and enhancing progressively, resulting in both better performance and user experience.</p>
  </div>
</article>