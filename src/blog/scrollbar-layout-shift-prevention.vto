---
title: "Preventing Scrollbar Layout Shifts with Modern CSS"
description: "How to eliminate layout shifts caused by scrollbar visibility changes using scrollbar-gutter and progressive enhancement"
eleventyNavigation:
  parent: "Blog"
  key: "Scrollbar Layout Shift Prevention"
  order: 2
date: 2025-01-27
tags: ["performance", "css", "progressive-enhancement", "layout-stability"]
---

{{ layout "layouts/base.vto" }}

<article class="[ blog-post ] [ flow flow--xl ]">
  <header class="[ blog-header ] [ flow flow--lg ]">
    <h1 class="hero__title">Preventing Scrollbar Layout Shifts with Modern CSS</h1>
    <p class="hero__lead">Eliminate jarring layout shifts when navigating between pages with different content heights using 2025's best CSS techniques.</p>
    <div class="[ meta ] [ cluster ] [ text-secondary ]">
      <time datetime="2025-01-27">January 27, 2025</time>
      <span>•</span>
      <span>Performance, CSS, Progressive Enhancement</span>
    </div>
  </header>

  <div class="[ blog-content ] [ flow flow--lg ]">
    <h2>The Problem: Navigation Layout Shifts</h2>
    
    <p>A common but frustrating UX issue occurs when navigating between pages with different content heights. The Home page has enough content to trigger a vertical scrollbar, but the Blog and Examples pages don't. This creates a noticeable layout shift as the scrollbar appears and disappears, causing the entire page content to jump horizontally.</p>

    <p>This type of Cumulative Layout Shift (CLS) degrades user experience and can negatively impact Core Web Vitals scores.</p>

    <h2>The Modern Solution: scrollbar-gutter</h2>

    <p>The 2025 approach uses the <code>scrollbar-gutter</code> CSS property with progressive enhancement:</p>

    <pre class="code-block"><code>html {
  font-family: var(--typography-family-sans);
  font-size: 1rem;
  line-height: 1.5;
  color-scheme: light dark;
  
  /* Prevent scrollbar layout shift - 2025 technique */
  overflow-y: scroll; /* Fallback for older browsers */
}

/* Modern scrollbar gutter support */
@supports (scrollbar-gutter: stable) {
  html {
    overflow-y: auto;
    scrollbar-gutter: stable;
  }
}</code></pre>

    <h2>How It Works</h2>

    <h3>Two-Tier Approach</h3>
    
    <ol>
      <li><strong>Fallback</strong>: <code>overflow-y: scroll</code> - Always shows scrollbar track space</li>
      <li><strong>Modern</strong>: <code>scrollbar-gutter: stable</code> - Reserves scrollbar space only when needed</li>
    </ol>

    <h3>Browser Behavior</h3>

    <ul>
      <li><strong>Without support</strong>: Scrollbar track always visible, no layout shift</li>
      <li><strong>With support</strong>: Scrollbar space reserved but only shows when content overflows</li>
      <li><strong>Both approaches</strong>: Eliminate horizontal jumping between pages</li>
    </ul>

    <h2>Browser Support and Progressive Enhancement</h2>

    <div class="[ performance-table ]">
      <h3>Current Browser Support (2025)</h3>
      <table>
        <thead>
          <tr>
            <th>Browser</th>
            <th>scrollbar-gutter Support</th>
            <th>Fallback Behavior</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Chrome 94+</td>
            <td>✅ Full Support</td>
            <td>Elegant space reservation</td>
          </tr>
          <tr>
            <td>Firefox 97+</td>
            <td>✅ Full Support</td>
            <td>Elegant space reservation</td>
          </tr>
          <tr>
            <td>Safari</td>
            <td>⏳ Coming Soon</td>
            <td>Always-visible scrollbar track</td>
          </tr>
          <tr>
            <td>Legacy Browsers</td>
            <td>❌ No Support</td>
            <td>Always-visible scrollbar track</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2>Important Considerations</h2>

    <h3>Overlay Scrollbars</h3>
    
    <p>The <code>scrollbar-gutter</code> property only applies to classic scrollbars. On systems using overlay scrollbars (common on macOS and some Linux distributions), the gutter will not be visible since overlay scrollbars don't consume layout space.</p>

    <h3>Alternative Techniques</h3>

    <p>For more complex scenarios, you might need the viewport width calculation method:</p>

    <pre class="code-block"><code>/* Calculate scrollbar width and offset content */
main {
  padding-left: calc(100vw - 100%);
}</code></pre>

    <p>This shifts content by the scrollbar width (or 0 if no scrollbar), but should be used carefully as it can cause other layout issues.</p>

    <h2>Integration with CUBE CSS</h2>

    <p>This solution fits perfectly within CUBE CSS methodology:</p>

    <ul>
      <li><strong>Reset Layer</strong>: Applied at the html level as fundamental behavior</li>
      <li><strong>Progressive Enhancement</strong>: Uses <code>@supports</code> for feature detection</li>
      <li><strong>Performance First</strong>: Prevents CLS without JavaScript</li>
      <li><strong>Accessibility Aware</strong>: Works with all scrollbar types and user preferences</li>
    </ul>

    <h2>Critical CSS Placement</h2>

    <p>Since this prevents layout shifts, it's included in the critical CSS that's inlined in the document head, ensuring the fix applies before any content renders and eliminating the possibility of the shift occurring during initial page load.</p>

    <h2>Key Takeaways</h2>

    <ol>
      <li><strong>Use Modern Standards</strong>: <code>scrollbar-gutter: stable</code> is the elegant 2025 solution</li>
      <li><strong>Provide Fallbacks</strong>: <code>overflow-y: scroll</code> ensures universal support</li>
      <li><strong>Progressive Enhancement</strong>: Use <code>@supports</code> to deliver the best experience possible</li>
      <li><strong>Critical Timing</strong>: Include in critical CSS to prevent any layout shifts</li>
      <li><strong>Test Across Platforms</strong>: Remember overlay vs classic scrollbar behavior differences</li>
    </ol>

    <p>This technique provides a clean, standards-based solution to a common UX problem while maintaining progressive enhancement principles and excellent browser support.</p>
  </div>
</article>