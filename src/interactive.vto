{{ import { performanceStats, loadingSequence } from "./_includes/components/performance-stats.vto" }}
{{ import { islandDemo, performanceComparison } from "./_includes/components/island-showcase.vto" }}

{{ set runtimeInvestment = 26580 }}
{{ set componentCost = 1380 }}
{{ set totalCost = 3000 + runtimeInvestment + componentCost }}

{{ layout "layouts/base.vto" {
  title: "Level 2: Interactive Page - First Svelte Component",
  loadJS: true,
  statusBg: "#dcfce7",
  statusBorder: "#16a34a",
  navigation: [
    { url: "/", label: "üè† Static Homepage" },
    { url: "/simple/", label: "üì± Simple Page" },
    { url: "/interactive/", label: "üéØ Interactive Page", current: true },
    { url: "/complex/", label: "üîó Complex Page" }
  ]
} }}

<header>
  <h1>üéØ Level 2: Interactive Page</h1>
  {{ performanceStats(2, 3000, runtimeInvestment, componentCost) }}
</header>

<h2>First Svelte Component</h2>
<p>This page demonstrates loading the <strong>first Svelte component</strong>, which triggers loading the Svelte runtime. This is the "runtime investment" that all subsequent Svelte components benefit from.</p>

{{ performanceComparison([
  { name: 'Without Runtime Sharing', jsSize: 3000, frameworkSize: 26580, componentSize: 1380, components: 1 },
  { name: 'With Runtime Sharing (This Page)', jsSize: 3000, frameworkSize: 26580, componentSize: 1380, components: 1 },
  { name: 'Next Svelte Component', jsSize: 0, frameworkSize: 0, componentSize: 1380, components: 1 },
  { name: 'Multiple Svelte Components', jsSize: 0, frameworkSize: 0, componentSize: 4140, components: 3 }
]) }}

<h3>Interactive Svelte Component</h3>

{{ islandDemo('counter', 'svelte', { initialCount: 10 }, 'visible') }}

<h3>What This Demonstrates</h3>
<ul>
  <li><strong>Runtime Loading:</strong> Svelte runtime (~15KB) loads once for all components</li>
  <li><strong>Component Reactivity:</strong> Full reactive state management with Svelte 5 runes</li>
  <li><strong>Global State:</strong> Component connects to shared application state</li>
  <li><strong>Dynamic Imports:</strong> Component code loads separately from runtime</li>
  <li><strong>Caching Strategy:</strong> Runtime cached for future Svelte components</li>
</ul>

<h3>Network Loading Pattern</h3>
<ol>
  <li><strong>Page Load:</strong> HTML, CSS, and main.js (~3KB)</li>
  <li><strong>Component Visible:</strong> Svelte runtime (~15KB) + Counter component (~2KB)</li>
  <li><strong>Runtime Cached:</strong> Future Svelte components only load component code</li>
</ol>

<h3>Performance Investment</h3>
<p>This page pays the "Svelte runtime cost" once. After this:</p>
<ul>
  <li>‚úÖ Svelte runtime is cached by the browser</li>
  <li>‚úÖ Global state management is available</li>
  <li>‚úÖ Component reactivity system is active</li>
  <li>‚úÖ Future Svelte components load much faster</li>
</ul>

<p><strong>Check your Network tab:</strong> You'll see svelte.js load once, then get cached for reuse!</p>

<footer>
  <p><em>This level introduces reactive components and shared state - perfect for interactive applications that need more than vanilla JS.</em></p>
</footer>

{{ /layout }}