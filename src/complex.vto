{{ import { performanceStats, loadingSequence, performanceComparison } from "./_includes/components/performance-stats.vto" }}
{{ import { islandDemo } from "./_includes/components/island-showcase.vto" }}

{{ set components = ['counter', 'greeting', 'statedemo'] }}
{{ set runtimeCost = 26580 }}
{{ set componentSizes = { counter: 1380, greeting: 1220, statedemo: 2140 } }}
{{ set totalComponentSize = Object.values(componentSizes).reduce((sum, size) => sum + size, 0) }}

{{ layout "layouts/base.vto" {
  title: "Level 3: Complex Page - Multiple Svelte Components",
  loadJS: true,
  statusBg: "#f3e8ff",
  statusBorder: "#a855f7",
  navigation: [
    { url: "/", label: "üè† Static Homepage" },
    { url: "/simple/", label: "üì± Simple Page" },
    { url: "/interactive/", label: "üéØ Interactive Page" },
    { url: "/complex/", label: "üîó Complex Page", current: true }
  ]
} }}

<header>
  <h1>üîó Level 3: Complex Page</h1>
  {{ performanceStats(3, 3000, 0, totalComponentSize) }}
</header>

<h2>Multiple Svelte Components</h2>
<p>This page demonstrates the <strong>efficiency of shared runtime</strong> - multiple components reusing cached runtime.</p>

{{ set efficiencyData = [
  { name: 'Individual Runtimes', jsSize: 3000, frameworkSize: runtimeCost * 3, componentSize: totalComponentSize, components: 3 },
  { name: 'Shared Runtime (Actual)', jsSize: 3000, frameworkSize: 0, componentSize: totalComponentSize, components: 3 }
] }}

{{ set savings = (runtimeCost * 3) - 0 }}
<div style="background: #f0fdf4; padding: 1rem; border-radius: 6px; border: 1px solid #16a34a; margin: 1rem 0;">
  <strong>üéØ Runtime Sharing Efficiency:</strong><br>
  Without sharing: {{ ((runtimeCost * 3 + totalComponentSize + 3000) / 1024).toFixed(1) }}KB<br>
  With sharing: {{ ((totalComponentSize + 3000) / 1024).toFixed(1) }}KB<br>
  <span style="color: #166534; font-weight: bold;">Savings: {{ (savings / 1024).toFixed(1) }}KB ({{ ((savings / (runtimeCost * 3 + totalComponentSize + 3000)) * 100).toFixed(1) }}% reduction)</span>
</div>

<h3>Component Showcase</h3>

{{ for component of components }}
  {{ set props = component === 'counter' ? { initialCount: 0 } : component === 'greeting' ? { name: 'Developer', showTime: true } : {} }}
  {{ islandDemo(component, 'svelte', props, 'visible') }}
{{ /for }}

<h3>What This Demonstrates</h3>
<ul>
  <li><strong>Runtime Reuse:</strong> Svelte runtime already cached - only component code loads</li>
  <li><strong>Shared State:</strong> All components share the same reactive state</li>
  <li><strong>Minimal Overhead:</strong> Each additional component adds only ~1-2KB</li>
  <li><strong>Performance:</strong> Components initialize instantly using cached runtime</li>
  <li><strong>Coordinated Updates:</strong> State changes propagate across all components</li>
</ul>

<h3>Network Loading Pattern</h3>
<ol>
  <li><strong>Page Load:</strong> HTML, CSS, and main.js (~3KB)</li>
  <li><strong>Components Visible:</strong> Only component code loads (~2KB each)</li>
  <li><strong>Runtime Already Cached:</strong> Zero additional framework overhead</li>
  <li><strong>State Synchronization:</strong> All components share reactive state instantly</li>
</ol>

<h3>Scalability Benefits</h3>
<p>At this level, you get maximum efficiency:</p>
<ul>
  <li>‚úÖ <strong>Zero runtime cost</strong> for additional Svelte components</li>
  <li>‚úÖ <strong>Shared state</strong> synchronizes across all components</li>
  <li>‚úÖ <strong>Cross-tab sync</strong> with localStorage and BroadcastChannel</li>
  <li>‚úÖ <strong>Component isolation</strong> - each loads independently</li>
  <li>‚úÖ <strong>Progressive enhancement</strong> - degrades gracefully</li>
</ul>

<p><strong>Optimal Architecture:</strong> This demonstrates the sweet spot for complex interactive applications - minimal JavaScript overhead with maximum component capabilities!</p>

<footer>
  <p><em>This represents the fully scaled architecture - perfect for complex applications with multiple interactive components and shared state management.</em></p>
</footer>

{{ /layout }}