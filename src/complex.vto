{{ layout "layouts/base.vto" {
  title: "Level 3: Complex Page - Multiple Svelte Components",
  loadJS: true,
  statusBg: "#f3e8ff",
  statusBorder: "#a855f7",
  navigation: [
    { url: "/", label: "🏠 Static Homepage" },
    { url: "/simple/", label: "📱 Simple Page" },
    { url: "/interactive/", label: "🎯 Interactive Page" },
    { url: "/complex/", label: "🔗 Complex Page", current: true }
  ]
} }}

<header>
  <h1>🔗 Level 3: Complex Page</h1>
  <div class="status">
    <strong>JavaScript Status:</strong> Multiple Svelte components sharing cached runtime 🟦<br>
    <strong>Bundle Size:</strong> ~30KB total (runtime cached, component code only)<br>
    <strong>Components:</strong> Multiple interactive components + shared state
  </div>
</header>

<h2>Multiple Svelte Components</h2>
<p>This page demonstrates the <strong>efficiency of shared runtime</strong> - multiple Svelte components that reuse the cached runtime and share global state seamlessly.</p>

<div class="components-grid" style="display: grid; gap: 1rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));">
  <div class="component-demo" style="border: 2px dashed #a855f7; padding: 1rem; margin: 1rem 0; border-radius: 6px; background: #faf5ff;">
    <h4>Counter Component</h4>
    <p>A reactive counter that updates global state on each interaction.</p>
    
    <is-land on:visible type="svelte" component="counter" props='{"initialCount": 0}'>
      <div style="padding: 1rem; border: 2px dashed #a855f7; border-radius: 8px; background: #faf5ff; text-align: center;">
        🟦 Loading Counter...<br>
        <small>Reusing cached Svelte runtime</small>
      </div>
    </is-land>
  </div>

  <div class="component-demo" style="border: 2px dashed #a855f7; padding: 1rem; margin: 1rem 0; border-radius: 6px; background: #faf5ff;">
    <h4>Greeting Component</h4>
    <p>An interactive greeting component with time display and state management.</p>
    
    <is-land on:visible type="svelte" component="greeting" props='{"name": "Developer", "showTime": true}'>
      <div style="padding: 1rem; border: 2px dashed #a855f7; border-radius: 8px; background: #faf5ff; text-align: center;">
        🟦 Loading Greeting...<br>
        <small>Component code only (~2KB)</small>
      </div>
    </is-land>
  </div>
</div>

<div class="component-demo" style="border: 2px dashed #a855f7; padding: 1rem; margin: 1rem 0; border-radius: 6px; background: #faf5ff;">
  <h4>Shared State Demo</h4>
  <p>This component shows global state shared across all Svelte components - including counters, theme, and activity tracking.</p>
  
  <is-land on:visible type="svelte" component="statedemo">
    <div style="padding: 1.5rem; border: 2px dashed #a855f7; border-radius: 8px; background: #faf5ff; text-align: center;">
      🟦 Loading State Demo...<br>
      <small>Shared global state management</small>
    </div>
  </is-land>
</div>

<h3>What This Demonstrates</h3>
<ul>
  <li><strong>Runtime Reuse:</strong> Svelte runtime already cached - only component code loads</li>
  <li><strong>Shared State:</strong> All components share the same reactive state</li>
  <li><strong>Minimal Overhead:</strong> Each additional component adds only ~1-2KB</li>
  <li><strong>Performance:</strong> Components initialize instantly using cached runtime</li>
  <li><strong>Coordinated Updates:</strong> State changes propagate across all components</li>
</ul>

<h3>Network Loading Pattern</h3>
<ol>
  <li><strong>Page Load:</strong> HTML, CSS, and main.js (~3KB)</li>
  <li><strong>Components Visible:</strong> Only component code loads (~2KB each)</li>
  <li><strong>Runtime Already Cached:</strong> Zero additional framework overhead</li>
  <li><strong>State Synchronization:</strong> All components share reactive state instantly</li>
</ol>

<h3>Scalability Benefits</h3>
<p>At this level, you get maximum efficiency:</p>
<ul>
  <li>✅ <strong>Zero runtime cost</strong> for additional Svelte components</li>
  <li>✅ <strong>Shared state</strong> synchronizes across all components</li>
  <li>✅ <strong>Cross-tab sync</strong> with localStorage and BroadcastChannel</li>
  <li>✅ <strong>Component isolation</strong> - each loads independently</li>
  <li>✅ <strong>Progressive enhancement</strong> - degrades gracefully</li>
</ul>

<p><strong>Optimal Architecture:</strong> This demonstrates the sweet spot for complex interactive applications - minimal JavaScript overhead with maximum component capabilities!</p>

<footer>
  <p><em>This represents the fully scaled architecture - perfect for complex applications with multiple interactive components and shared state management.</em></p>
</footer>

{{ /layout }}